<?php
namespace app\common\model;



use think\model\concern\SoftDelete;

class Order extends BaseModel
{
    use SoftDelete;

    //订单有效时间--有效时间为1小时  单位秒
    const ORDER_EXP_TIME = 7200;

    //用户可操作常量
    const U_ORDER_HANDLE_PAY = 'pay';           //订单支付
    const U_ORDER_HANDLE_CANCEL = 'cancel';     //取消订单
    const U_ORDER_HANDLE_DEL = 'del';           //删除订单
    const U_ORDER_HANDLE_SURE_REC = 'receive'; //确认收货

    //管理员操作
    const M_ORDER_HANDLE_SURE_PAY = 'sure-pay';      //确定支付
    const M_ORDER_HANDLE_SEND = 'send';         //发送
    const M_ORDER_HANDLE_DEL = 'del';           //删除
    const M_ORDER_HANDLE_CANCEL = 'cancel';     //取消
    const M_ORDER_HANDLE_EDIT_ADDR = 'edit-addr';     //编辑订单地址

    public $m_id_opt_del=0;  //删除订单
    public $m_id_opt_cancel=0;//取消订单

    //订单有效期
    public static $exp_time=24;//小时

    public $check_channel = false;
    public $channel_g_data;//渠道数据

    protected $json=['invoice_content'];

    //秒杀
    public $is_skill = false; //描述状态

    //收货方式
    public static $fields_pay_way = [
        ['name'=>'在线付款'],
        ['name'=>'货到付款'],
    ];
    //收货方式
    public static $fields_rec_mode = [
        ['name'=>'自提'],
        ['name'=>'快递'],
    ];

    //订单状态
    public static $fields_status = [
        ['name'=>'待付款','style'=>'wait-pay','u_handle'=>[
//                self::U_ORDER_HANDLE_SURE_REC=>['rec_mode'=>1],
            self::U_ORDER_HANDLE_PAY,
            self::U_ORDER_HANDLE_CANCEL,
//            self::U_ORDER_HANDLE_DEL
        ],'m_handle'=>[
            self::M_ORDER_HANDLE_DEL,
            self::M_ORDER_HANDLE_CANCEL,
            self::M_ORDER_HANDLE_SURE_PAY,
            self::M_ORDER_HANDLE_EDIT_ADDR,
            self::M_ORDER_HANDLE_SEND=>['pay_way'=>1],
        ]
        ],
        ['name'=>'已付款','style'=>'sure-pay'],
        ['name'=>'已取消','style'=>'cancel','u_handle'=>[self::U_ORDER_HANDLE_DEL],'m_handle'=>[self::M_ORDER_HANDLE_DEL]],
        ['name'=>'已完成','style'=>'complete','u_handle'=>[self::U_ORDER_HANDLE_DEL]],
    ];
    //发货状态
    public static $fields_is_send = [
        ['name'=>'待发货','m_handle'=>[
            self::M_ORDER_HANDLE_SEND,
        ]],
        ['name'=>'已发货'],
    ];
    //收货状态
    public static $fields_is_receive = [
        ['name'=>'待收货','u_handle'=>[ self::U_ORDER_HANDLE_SURE_REC ]],
        ['name'=>'已收货'],
    ];

    public static function getInvoiceContent($type=null,$field=null){
        $data = [
            ['name'=>'酒水'],
            ['name'=>'明细'],
        ];
        if(is_null($type)){
            return $data;
        }else{
            $info = isset($data[$type])?$data[$type]:[];
            if(is_null($field)){
                return $info;
            }else{

                return isset($info[$field])?$info[$field]:'';
            }
        }
    }

    public static function getInvoiceType($type=null,$field=null){
        $data =  [
            ['name'=>'不需要发票','type'=>[],'data'=>[]],
            [
                'name'=>'纸制发票',

                'type' => [
                    [
                        'name'=>'个人',
                        'data'=>[
                            ['name'=>'用户名','field'=>'name'],
                            ['name'=>'手机号','field'=>'phone'],
                        ]
                    ],
                    [
                        'name'=>'单位',
                        'data'=>[
                            ['name'=>'单位名称','field'=>'title'],
                            ['name'=>'纳税人识别号','field'=>'no'],
                            ['name'=>'注册地址','field'=>'addr'],
                            ['name'=>'公司电话','field'=>'tel'],
                            ['name'=>'开户银行','field'=>'bank'],
                            ['name'=>'银行账号','field'=>'bank_card'],
                        ]
                    ],
                ]
            ]
        ];
        if(is_null($type)){
            return $data;
        }else{
            $info = isset($data[$type])?$data[$type]:[];
            if(is_null($field)){
                return $info;
            }else{

                return isset($info[$field])?$info[$field]:'';
            }
        }
    }


    public static function getInvoiceTypeName($type,$index){
        $data = self::getInvoiceType($type);
        if(empty($data) || !isset($data['type']) || !isset($data['type'][$index]) ){
            return '';
        }
        return isset($data['type'][$index]['name'])?$data['type'][$index]['name']:'';

    }


    public static function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        //发送通知
        self::event('send_notice_pay_success',function($model){
            //发送付款成功通知
            UserNotice::recordLog('订单付款通知','订单号为:'.$model['no'].'已成功付款',$model['id'],$model['uid'],1);
        });
        //发送通知
        self::event('send_notice_send',function($model){
            //发货通知
            UserNotice::recordLog('订单发货通知','订单号为:'.$model['no'].'已发货',$model['id'],$model['uid'],2);
        });
        self::event('send_notice_receive',function($model){
            //收货通知
            UserNotice::recordLog('订单完成通知','订单号为:'.$model['no'].'已交易完成,请尽情享用本产品.',$model['id'],$model['uid'],1);
        });
    }

    /**
     * 检出订单信息
     * @param $user_model User 用户模型
     * @param $id int 商品id
     * @param $num int 购买数量
     * @throws
     * @return  array
     * */
    public function checkOrderInfo(User $user_model,$id=0,$num=1)
    {

        //商品数据
        $gid = $goods_data =[];
        if(!$this->is_skill){
            if($this->check_channel=='cart'){
                //购物车过来
                UserCart::where(['uid'=>$user_model->id,'is_checked'=>1])->select()
                    ->each(function($item,$index)use(&$gid){
                        if(array_key_exists($item['gid'],$gid)){
                            $gid[$item['gid']] +=$item['num'];
                        }else{
                            $gid[$item['gid']] =$item['num'];
                        }
                    });

            }elseif($this->check_channel=='once_again'){
                $channel_g_data = array_filter(explode(',',$this->channel_g_data));
                foreach ($channel_g_data as $vo){
                    $arr = explode('-',$vo);
                    if(count($arr)==2){
                        $gid[$arr[0]] = $arr[1];
                    }
                }
            }else{
                //指定商品
                $gid[$id] = $num;
            }

            //所有商品数据
            $goods_ids = array_keys($gid);
            //商品数据
            $goods_info = Goods::with(['linkGoodsGiftMore.linkGoods'])->where(['id'=>$goods_ids])->select();

        }else{
            //秒杀商品
            $gid[$id] = $num;
            //秒杀条件
            $select_where[] = ['id','=',$id];
            //查询正在进行的秒杀活动商品
            list($running_key,$skill_info) = \app\common\model\GoodsSkill::getSkillInfo();
            $type_info = $running_key!==false?$skill_info[$running_key]:null;
            $goods_info = [];
            if(!empty($type_info) && $type_info['is_running']==1){
                $select_where[] = ['type','=',$running_key];
                $goods_info = Goods::withjoin('linkGoodsSkill','left')->with(['linkGoodsGiftMore.linkGoods'])->where($select_where)->select();

            }
        }


        foreach ($goods_info as $vo){
            if(isset($gid[$vo['id']])){
//                $goods_arr = $vo->getData();
//                $goods_arr['spu'] = empty($goods_arr['spu'])?[]:json_decode($goods_arr['spu'],true);

                //调整秒杀商品售价
                if($this->is_skill){
                    $vo['no_skill_price'] = $vo['price']; // 原始售价
                    $vo['price'] = $vo['link_goods_skill']['price'];//秒杀价格
                }

                $vo['buy_num'] = $gid[$vo['id']];
                $vo['per']  = 1;//Goods::getGoodsPer($user_model['type']);//商品折扣
                $vo['per_price']  = $vo['per']*$vo['price'];//$vo->getUserPrice($user_model);
                $goods_data[]=  $vo;
            }
        }
        //商品总数量
        $total_num = 0;

        //计算金额相关数据
        $money = [
            'money' => 0.00 ,//总金额
            'goods_money' => 0.00 ,//商品总金额
            'pay_money' => 0.00 ,//实际支付总金额
            'freight_money' => 0.00 ,//运费金额
            'taxation_money' => 0.00 ,//税费总金额
        ];
        foreach ($goods_data as $vo){
            $total_num += $vo['buy_num'];
            $goods_price = $vo['per_price']*$vo['buy_num']; // 购买金额
            $goods_per_price = $vo['per_price']*$vo['buy_num']; // 购买金额
            $freight_money = 0.00;//$vo['freight_money']*$vo['buy_num']; // 运费金额
            $taxation_money = 0.00;//$vo['taxation_money']*$vo['buy_num']; // 税费金额

            $money['money'] += $goods_price+$freight_money+$taxation_money;
            $money['goods_money'] += $goods_price;
            $money['pay_money'] += $goods_per_price+$freight_money+$taxation_money;
            $money['freight_money'] += $freight_money;
            $money['taxation_money'] += $taxation_money;
        }
        //强转2位小数
        foreach ($money as &$vo){
            $vo = number_format($vo,2,'.','');
        }

        return [$goods_data,$money,$total_num];
    }
    /**
     * 订单未处理数量
     * */
    public static function noHandleNum($province,$m_uid,$is_spuer_manager=false)
    {
        $where['status']=0;
        if(!$is_spuer_manager){
            $where['province']= $province;
        }
        $count = self::find()->where($where)->count();
        return  $count?$count:0;
    }


    /**
     * 确认订单
     * @param User $model_user  当前操作用户
     * @param array $goods_info  购买的商品
     * @Param array $money array 商品金额汇总
     * @Param array $model_addr  购买地址
     * @param array $php_input  所有请求数据
     * @throws
     * @return void
     * */
    public function confirm(User $model_user,$goods_info,$money,$model_addr,array $php_input=[])
    {
        if(empty($model_user->phone)) exception('前往个人中心,绑定手机号码后才能下单',-2);

        if(empty($model_addr)) exception('请选择收货地址');
        if(empty($goods_info)) exception('请选择商品信息');
        $remark = empty($php_input['remark'])?'':trim($php_input['remark']);//订单备注
        //发票
        $invoice_type = empty($php_input['invoice_type'])?0:$php_input['invoice_type'];
        $invoice_content_type = empty($php_input['invoice_content'])?0:$php_input['invoice_content'];
        $invoice_type_index = empty($php_input['invoice_type_index'])?0:$php_input['invoice_type_index'];
        //发票内容
        $invoice = empty($php_input['invoice']) ? [] : $php_input['invoice'];
        $invoice = isset($invoice[$invoice_type_index])?$invoice[$invoice_type_index]:[];
//        dump($invoice);
        //选择的发票信息
        $invoice_type_info = self::getInvoiceType($invoice_type,'type');
        $invoice_data = isset($invoice_type_info[$invoice_type_index]) ? $invoice_type_info[$invoice_type_index] : [];
        $invoice_info = []; //记录发票数据
        if(!empty($invoice_data)) {
            foreach ($invoice_data['data'] as $in_d){
                $inv_field =  $in_d['field'];
                $inv_name =  $in_d['name'];
                if(empty($invoice[$inv_field]))  exception('发票信息:'.$inv_name.'必须输入');
                $invoice_info[] = [
                    'name' => $inv_name,
                    'key' => $inv_field,
                    'value' => $invoice[$inv_field],
                ];
            }
        }
//        dump($invoice_info);exit;


        //订单数据
        $model_order = $this;
        $model_order->no = self::getOrderNo();
        $model_order->uid = $model_user->id;
        $model_order->is_skill = (int)$this->is_skill;//秒杀状态
        $model_order->pay_way = empty($php_input['pay_way'])?0:$php_input['pay_way'];

        if($model_order->pay_way==1){
            //货到付款
            $model_order->step_flow=1;//直接进入待发货状态
        }

        //金钱信息
        $model_order->money = !empty($money['money'])?$money['money']:0.00;
        $model_order->goods_money = !empty($money['goods_money'])?$money['goods_money']:0.00;
        $model_order->pay_money = !empty($money['pay_money'])?$money['pay_money']:0.00;
        $model_order->freight_money = !empty($money['freight_money'])?$money['freight_money']:0.00;
        $model_order->taxation_money = !empty($money['taxation_money'])?$money['taxation_money']:0.00;

        //发票
        $model_order->invoice_type = $invoice_type;
        if(!empty($invoice_info)){
            empty($php_input['invoice_phone']) && exception('请输入发票联系人手机号');
            $model_order->invoice_phone = $php_input['invoice_phone'];
            $model_order->invoice_content_type = $invoice_content_type;
            $model_order->invoice_type_index = $invoice_type_index;
            $model_order->invoice_content = json_encode($invoice_info);
        }
        try{
            \think\Db::startTrans();

            if($this->check_channel=='cart'){
                //购物车过来删除购物车内容
                UserCart::where(['uid'=>$model_user->id,'is_checked'=>1])->delete();
            }

            //保存订单信息
            $model_order->save();
            //保存收货地址
            $model_order_addr = new OrderAddr();
            $model_order_addr->oid=$model_order->id;
            $model_order_addr->phone=!empty($model_addr['phone'])?$model_addr['phone']:'';
            $model_order_addr->username=!empty($model_addr['username'])?$model_addr['username']:'';
            $model_order_addr->addr=!empty($model_addr['addr'])?$model_addr['addr']:'';
            $model_order_addr->addr_extra=!empty($model_addr['addr_extra'])?$model_addr['addr_extra']:'';
            $model_order_addr->remark=$remark;
            $model_order_addr->save();

            //商品数据
            $order_goods_data = [];

            foreach($goods_info as $vo){
                array_push($order_goods_data,[
                    'oid'=>$model_order->id,
                    'gid'=>$vo->id,
                    'price'=>$vo->price,
                    'per'=>$vo->per,
                    'per_price'=>$vo['per_price']?$vo['per_price']:0.00,
                    'num'=>$vo->buy_num,
                    'bnum'=>$vo->bnum, //批发数量
                    'name'=>$vo->getAttr('name'),
                    'img'=>$vo->cover_img,
                    'extra'=>json_encode($vo->getData()),//保存商品原始数据
                ]);


                //赠品
                foreach ($vo['link_goods_gift_more'] as $gift){
                    array_push($order_goods_data,[
                        'oid'=>$model_order->id,
                        'gid'=>$gift['fid'],//礼品商品id
                        'm_gid'=>$gift['gid'], // 商品id
                        'price'=>$gift['link_goods']['price'], //售价
                        'num'=>1,//礼品数量
                        'bnum'=>$gift['link_goods']['bnum'], //批发数量
                        'name'=>$gift['link_goods']['name'],
                        'img'=>$gift['link_goods']->cover_img,
                        'extra'=>json_encode($gift->getData()),//保存礼品原始数据
                    ]);
                }
            }
            (new OrderGoods())->saveAll($order_goods_data);
            \think\Db::commit();
        }catch (\Exception $e){
            \think\Db::rollBack();
            exception($e->getMessage().$e->getLine());
        }
    }


    /**
     * 订单流程
     * @param int|null $step 流程步骤
     * @param string|null $need_field 需要字段
     * @param string $def_attr 流程对应字段属性
     * @return array|string|
     * */
    public function getStepFlowInfo($step=null, $need_field='name', $def_attr='prop_func')
    {
        $data = [
            ['name'=>'支付流程','prop_func'=>'fields_status','field'=>'status'],
            ['name'=>'发货流程','prop_func'=>'fields_is_send','field'=>'is_send'],
            ['name'=>'收货流程','prop_func'=>'fields_is_receive','field'=>'is_receive'],
            ['name'=>'交易已完成','prop_func'=>'fields_status','field'=>'status'],
        ];

        if(is_null($step)){
            return $data;
        }else{
            if(!isset($data[$step])){
                return;
            }
            //流程信息
            $info = $data[$step];
            if($def_attr=='prop_func'){
                return self::getPropInfo($info[$def_attr],$this->getAttr($info['field']),$need_field);

            }else{
                return is_null($def_attr)?$info:isset($info[$need_field])?$info[$need_field]:'';
            }
        }
    }

    /**
     * 删除订单
     * @param BaseModel $user_model 用户|管理员模型
     * @param int $id 订单id
     * @throws
     * */
    public static function del(BaseModel $user_model,$id)
    {
        if(empty($id) || !is_numeric($id) || $id<=0) exception('订单信息异常:id');
        if(empty($user_model)) exception('用户资料异常');

        $model = self::get($id);
        if($user_model instanceof SysManager){
            //管理员
            $handle_action = $model->getUserHandleAction('m_handle');
            if(!in_array(self::M_ORDER_HANDLE_DEL,$handle_action))  exception('订单状态未处于可删除状态');
            $model->m_id_opt_del = $user_model->id;

        }else{
            if(empty($model) || $model['uid']!=$user_model->id)  exception('订单数据异常');
            $handle_action = $model->getUserHandleAction();
            if(!in_array(self::U_ORDER_HANDLE_DEL,$handle_action))  exception('订单状态未处于可删除状态');
        }
        $model->delete();
    }

    /**
     * 取消订单
     * @param User $user_model 用户模型
     * @param $id int 订单id
     * @param $is_force bool 是否强制取消订单
     * @throws
     * */
    public static function cancel(BaseModel $user_model,$id,$is_force=false)
    {
        if(empty($id) || !is_numeric($id) || $id<=0) exception('订单信息异常:id');
        if(empty($user_model)) exception('用户资料异常');

        $model = self::get($id);
        if($user_model instanceof SysManager){
            //管理员
            $handle_action = $model->getUserHandleAction('m_handle');
            if(!in_array(self::M_ORDER_HANDLE_CANCEL,$handle_action))  exception('订单状态未处于可取消状态');
            $model->m_id_opt_cancel = $user_model->id;
        }else{
            if(empty($model) || $model['uid']!=$user_model->id)  exception('订单数据异常');
            $handle_action = $model->getUserHandleAction();
            if(!in_array(self::U_ORDER_HANDLE_CANCEL,$handle_action))  exception('订单状态未处于可取消状态');
        }


        $model->status = 2;
        $model->cancel_time = time();
        $save_bool = $model->save(false);
        if(!$save_bool){
            exception('訂單保存異常');
        }
    }


    /**
     * 收货--订单
     * @param User $user_model 用户模型
     * @param $id int 订单id
     * @param $is_force bool 是否强制取消订单
     * @throws
     * */
    public static function receive(User $user_model,$id)
    {

        if(empty($id) || !is_numeric($id) || $id<=0) exception('订单信息异常:id');
        if(empty($user_model)) exception('用户资料异常');

        $model = self::get($id);
        if(empty($model) || $model['uid']!=$user_model->id)  exception('订单数据异常');
        $handle_action = $model->getUserHandleAction();
        if(!in_array(self::U_ORDER_HANDLE_SURE_REC,$handle_action))  exception('订单状态未处于待收货状态');


        //确认收货
        $model->step_flow = 3; //完成订单流程
        $model->is_receive=1;//收货成功
        $model->receive_end_time = time();
        //交易完成
        $model->status=3;
        $model->complete_time = time();//交易完成

        $save_bool = $model->save(false);
        if(!$save_bool){
            exception('订单保存异常');
        }

        //交易通知
        $model->trigger('send_notice_receive');

    }

    /**
     * 发货
     * @param $id int 订单id
     * @param $logistics array 物流信息
     * @throws
     * */
    public static function optSend($id,array $logistics=[])
    {
        if(empty($id)) exception('订单数据异常');
        //查询订单信息
        $model = self::get($id);
        if(empty($model)) exception('操作对象异常');

        if(empty($logistics['no']))  exception('请输入物流单号');
        if(empty($logistics['company']))  exception('请输入公司名称');

        \think\Db::startTrans();
        try{
            //购买者信息
//            $model_user_buy = User::get($model['uid']);
            //修改发货状态
            $model->is_send = 1;

            //物流
            $model_logistics = OrderLogistics::where(['oid'=>$id])->find();
            if(empty($model_logistics)){
                $model_logistics = new OrderLogistics();
            }
            $model_logistics->oid = $id;
            $model_logistics->no = $logistics['no'];
            $model_logistics->company = $logistics['company'];
            $model_logistics->money = empty($logistics['money'])?0.00:$logistics['money'];
            $model_logistics->save();
            //发货完成
            $model->send_end_time = time();
            $model->step_flow = 2; //进入发货
            $model->is_receive=0;//等待收货状态
            $model->receive_start_time=time();//开始收货时间

            $model->save();
            \think\Db::commit();
        }catch (\Exception $e){
            \think\Db::rollback();
            exception('订单操作异常:'.$e->getMessage());
        }

        //交易通知
        $model->trigger('send_notice_send');

    }

    /**
     * 确认付款
     * @param SysManager $manager 管理员模型
     * @param int $id 操作订单id
     * @throws
     * */
    public static function surePay(SysManager $manager ,$id)
    {
        $model = self::get($id);
        empty($model) && exception('订单信息异常');
        $handle_action = $model->getUserHandleAction('m_handle');
        if(!in_array(self::M_ORDER_HANDLE_SURE_PAY,$handle_action))  exception('订单状态未处于待收货状态');

        //确认支付
        $model->_sure_pay();

    }

    /**
     * 调整订单地址
     * @param $data array
     * @throws
     * */
    public static function modAddr(array $data)
    {
        $province=isset($data['province'])?$data['province']:'';
        $city = isset($data['city'])?$data['city']:'';
        $town = isset($data['town'])?$data['city']:'';
        if(empty($province)|| $province=='请选择') exception('请选择省份');
        if(empty($city)|| $city=='请选择') exception('请选择城市');
        if(empty($town)|| $town=='请选择') exception('请选择区、县');
        $data['addr'] = $province.' '.$city.' '.$town;
        if(!isset($data['oid'])) exception('订单信息异常');
        if(empty($data['username'])) exception('用户名不能为空');
        if(empty($data['phone'])) exception('手机号不能为空');
        if(!valid_phone($data['phone'])) exception('请输入正确的手机号码');
        if(empty($data['addr'])) exception('请选择地址');

        $model = OrderAddr::where(['oid'=>$data['oid']])->find();
        if(empty($model)){
            $model = new OrderAddr();
        }
        foreach ($data as $key=>$vo){
            $model->setAttr($key,$vo);
        }
        $model->save();
    }
    /**
     * 订单状态数量
     * @param $need_state array 需要查询的数量
     * @param $user_model User 用户模型
     * @return array
     * */
    public static function stateNum(array $need_state=[], User $user_model=null)
    {
        $need_state = empty($need_state)?[
            self::U_ORDER_HANDLE_PAY,self::M_ORDER_HANDLE_SEND,self::U_ORDER_HANDLE_SURE_REC
        ]:$need_state;
        $fnc_type = function(array $where=[]){
            return self::where($where)->count();
        };
        //待付款
        $result = [];
        $where = [];
        !empty($user_model) && $where['uid'] =$user_model->id;
        if(in_array(self::U_ORDER_HANDLE_PAY,$need_state)){
            $result[] = $fnc_type(array_merge($where,['status'=>0,'step_flow'=>0]));
        }
        //已付款 待发货
        if(in_array(self::M_ORDER_HANDLE_SEND,$need_state)){
            $result[] = $fnc_type(array_merge($where,['is_send'=>0,'step_flow'=>1]));
        }
        //已付款 待收货
        if(in_array(self::U_ORDER_HANDLE_SURE_REC,$need_state)){
            $result[] = $fnc_type(array_merge($where,['is_send'=>1,'step_flow'=>2,'is_receive'=>0]));
        }

        return array_combine($need_state,$result);

    }

    //订单支付
    private function _sure_pay()
    {
        $this->step_flow = 1; //进入发货流程
        $this->status = 1;
        $this->pay_time = time();
        $this->save(false);

        //交易通知
        $this->trigger('send_notice_pay_success');
    }


    /**
     * 获取用户对订单可执行的操作
     * @param string  $mode 操作人员 u_handle|m_handle
     * @return array
     * */
    public function getUserHandleAction($mode = 'u_handle')
    {
        //可操作流程
        $attr_data = $this->getData();
        $flow_handle = $this->getStepFlowInfo($attr_data['step_flow'],$mode);
        $handle = [];
        if(!empty($flow_handle) && is_array($flow_handle)){
            foreach ($flow_handle as $index=>$fh){
                if(is_array($fh)){
                    //条件
                    foreach ($fh as $cond_key=>$cond_val){
                        if(isset($attr_data[$cond_key]) && $attr_data[$cond_key]==$cond_val){
                            array_push($handle,$index);
                        }
                    }
                }else{
                    is_string($fh) && array_push($handle,$fh);
                }
            }
        }
        return $handle;
    }


    
    

    //支付方式
    public static function getPayWay($type=null,$field = null)
    {
        $data = [
            ['name'=>'微信支付','icon'=>'/assets/images/icon04.png'],
            ['name'=>'支付宝','icon'=>'/assets/images/icon05.png'],
            ['name'=>'货到付款','icon'=>'/assets/images/icon06.png'],
        ];
        if(is_null($type)){
            return $data;
        }else{
            $info = isset($data[$type])?$data[$type]:[];
            if(is_null($field)){
                return $info;
            }else{
                return isset($info[$field])?$info[$field]:'';
            }
        }
    }

    //订单号
    public static function getOrderNo()
    {
        $cache_name = 'order_no'.date('Y-m-d');
        $number = cache($cache_name);
        empty($number) && $number = 0;
        $number+=1;
        //保存一天时间
        cache($cache_name,$number,86400);
        $number = sprintf('%03d',$number);
        return date('Ymds').rand(10,99).$number;
    }
    //订单号
    public static function getContractNo()
    {
        $cache_name = 'contract_no'.date('Y-m-d');
        $number = cache($cache_name);
        empty($number) && $number = 0;
        $number+=1;
        //保存一天时间
        cache($cache_name,$number,86400);
        $number = sprintf('%05d',$number);
        return date('YmdHis').rand(10,99).$number;
    }


    //订单数据
    public function getOrderPayInfo($mode)
    {
        return [
            'body' => '订单支付',
            'attach' => 'attach',
            'no' => $this->getAttr('no'),
            'pay_money' => $this->getAttr('pay_money'),
//            'pay_money' => 1,
            'expire_time' => self::ORDER_EXP_TIME,
            'goods_tag' => 'goods',
            'notify_url' => url('index/notify',['mode'=>$mode],false,true),
            'return_url' => url('Index/index',['mode'=>$mode],false,true)
        ];
    }


    //订单回调通知
    public static function handleNotify($order_no,array $data)
    {
        $model = self::where(['no'=>$order_no])->find();
        if(empty($model)){
            return;
        }elseif(!empty($model['pay_time'])){ // 已支付
            return;
        }
        //保存第三方支付信息
        $model->setAttr('pay_info',json_encode($data));
        return $model->_sure_pay();
    }

    //订单地址
    public function linkUser()
    {
        return $this->belongsTo('User', 'uid');
    }
    //订单地址
    public function linkAddr()
    {
        return $this->hasOne('OrderAddr','oid')->order('id desc');
    }

    //订单商品
    public function linkGoods()
    {
        return $this->hasMany('OrderGoods','oid');
    }

    //订单物流
    public function linkLogistics()
    {
        return $this->hasOne('OrderLogistics','oid');
    }

}